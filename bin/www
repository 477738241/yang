#!/usr/bin/env node

/**
 * Module dependencies.
 */

var cluster = require('cluster');
var numCPUs = require('os').cpus().length;
var app = require('../app');
var port = '8088';
var debug = require('debug')('enjoy:server');
var http = require('http');
var server;
var workerList = [];
var rssWarn = (12 * 1024 * 1024)
    , heapWarn = (10 * 1024 * 1024);
if (cluster.isMaster) {

    console.log('[master] ' + "start master...");
    for (var i = 0; i < numCPUs; i++) {
        workerList.push(createWorker());
    }
    cluster.on('listening',function(worker, address){
        console.log("A worker with #" + worker.id + " pid " + worker.process.pid +
            " is now connected to " + address.address + ":" + address.port);
    });
    cluster.on('exit', function(worker, code, signal) {
        console.log('worker ' + worker.process.pid + ' died');
        process.nextTick(function(){ cluster.fork(); });
    });

} else if (cluster.isWorker) {
    console.log('[worker] ' + "start worker ..." + cluster.worker.id);
    server = http.createServer(app).listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
    // setInterval(function report(){
    //     process.send({memory: process.memoryUsage(), process: process.pid});
    // }, 1000);
}

function createWorker(){
    var worker = cluster.fork();
    // worker.on("message", function(m){
    //         if (m.memory) {
    //             console.log(m.memory.rss,rssWarn);
                // if(m.memory.rss > rssWarn) {
                //     console.log('跑这个线程 ' + m.process + '')
                // }
            // }
    // });


    return worker;
};


function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}


function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}